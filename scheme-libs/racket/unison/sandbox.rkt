
#!racket/base

(provide expand-sandbox check-sandbox set-sandbox)

(require racket racket/hash)
(require unison/data)

; sandboxing information
(define sandbox-links (make-hash))

; look up the 'sensitive' sandbox links associated with a given link
(define (check-sandbox ln)
  (hash-ref sandbox-links ln '()))

(define (expand build have ds)
  (define (check d)
    (hash-ref build d (lambda () (check-sandbox d))))

  (for/fold ([acc '()]) ([d ds])
    (append (remove* have (check d)) acc)))

; Add a link to the sandboxing information.
; deps0 should be the immediate dependencies of the code for ln.
; They will be used to generate the overall sandboxing 
(define (expand-sandbox ls dss)
  (let rec ([build (make-immutable-hash)])
    (for/fold
      ([new (make-immutable-hash)]

       #:result
       (if (hash-empty? new)
         ; set the newly found links
         (hash-union! sandbox-links build #:combine append)
         (rec (hash-union build new #:combine append))))
       
      ([l ls] [ds dss])
      (let ([xp (expand build (hash-ref build l '()) ds)])
        (if (not (null? xp))
          (hash-set new l xp)
          new)))))

(define (set-sandbox link links)
  (hash-set! sandbox-links link links))

(define (sandbox-builtin name)
  (let ([ln (unison-termlink-builtin name)])
    (set-sandbox ln (list ln))))

(sandbox-builtin "Debug.watch")
(sandbox-builtin "Debug.trace")
(sandbox-builtin "Debug.toText")
(sandbox-builtin "IO.forkComp.v2")
(sandbox-builtin "Code.isMissing")
(sandbox-builtin "Code.cache_")
(sandbox-builtin "Code.lookup")
(sandbox-builtin "Code.validate")
(sandbox-builtin "Value.load")
(sandbox-builtin "Value.value")
(sandbox-builtin "STM.atomically")
(sandbox-builtin "IO.tryEval")
(sandbox-builtin "IO.openFile.impl.v3")
(sandbox-builtin "IO.closeFile.impl.v3")
(sandbox-builtin "IO.isFileEOF.impl.v3")
(sandbox-builtin "IO.isFileOpen.impl.v3")
(sandbox-builtin "IO.getEcho.impl.v1")
(sandbox-builtin "IO.ready.impl.v1")
(sandbox-builtin "IO.getChar.impl.v1")
(sandbox-builtin "IO.isSeekable.impl.v3")
(sandbox-builtin "IO.seekHandle.impl.v3")
(sandbox-builtin "IO.handlePosition.impl.v3")
(sandbox-builtin "IO.getBuffering.impl.v3")
(sandbox-builtin "IO.setBuffering.impl.v3")
(sandbox-builtin "IO.setEcho.impl.v1")
(sandbox-builtin "IO.getLine.impl.v1")
(sandbox-builtin "IO.getBytes.impl.v3")
(sandbox-builtin "IO.getSomeBytes.impl.v1")
(sandbox-builtin "IO.putBytes.impl.v3")
(sandbox-builtin "IO.systemTime.impl.v3")
(sandbox-builtin "IO.systemTimeMicroseconds.v1")
(sandbox-builtin "Clock.internals.monotonic.v1")
(sandbox-builtin "Clock.internals.realtime.v1")
(sandbox-builtin "Clock.internals.processCPUTime.v1")
(sandbox-builtin "Clock.internals.threadCPUTime.v1")
(sandbox-builtin "Clock.internals.sec.v1")
(sandbox-builtin "Clock.internals.nsec.v1")
(sandbox-builtin "Clock.internals.systemTimeZone.v1")
(sandbox-builtin "IO.getTempDirectory.impl.v3")
(sandbox-builtin "IO.createTempDirectory.impl.v3")
(sandbox-builtin "IO.getCurrentDirectory.impl.v3")
(sandbox-builtin "IO.setCurrentDirectory.impl.v3")
(sandbox-builtin "IO.fileExists.impl.v3")
(sandbox-builtin "IO.getEnv.impl.v1")
(sandbox-builtin "IO.getArgs.impl.v1")
(sandbox-builtin "IO.isDirectory.impl.v3")
(sandbox-builtin "IO.createDirectory.impl.v3")
(sandbox-builtin "IO.removeDirectory.impl.v3")
(sandbox-builtin "IO.renameDirectory.impl.v3")
(sandbox-builtin "IO.directoryContents.impl.v3")
(sandbox-builtin "IO.removeFile.impl.v3")
(sandbox-builtin "IO.renameFile.impl.v3")
(sandbox-builtin "IO.getFileTimestamp.impl.v3")
(sandbox-builtin "IO.getFileSize.impl.v3")
(sandbox-builtin "IO.serverSocket.impl.v3")
(sandbox-builtin "Socket.toText")
(sandbox-builtin "UDP.clientSocket.impl.v1")
(sandbox-builtin "UDP.serverSocket.impl.v1")
(sandbox-builtin "UDP.UDPSocket.close.impl.v1")
(sandbox-builtin "UDP.UDPSocket.recv.impl.v1")
(sandbox-builtin "UDP.UDPSocket.send.impl.v1")
(sandbox-builtin "UDP.ListenSocket.close.impl.v1")
(sandbox-builtin "UDP.UDPSocket.toText.impl.v1")
(sandbox-builtin "UDP.ListenSocket.toText.impl.v1")
(sandbox-builtin "UDP.ListenSocket.recvFrom.impl.v1")
(sandbox-builtin "UDP.ClientSockAddr.toText.v1")
(sandbox-builtin "UDP.ListenSocket.sendTo.impl.v1")
(sandbox-builtin "Handle.toText")
(sandbox-builtin "ThreadId.toText")
(sandbox-builtin "IO.socketPort.impl.v3")
(sandbox-builtin "IO.listen.impl.v3")
(sandbox-builtin "IO.clientSocket.impl.v3")
(sandbox-builtin "IO.closeSocket.impl.v3")
(sandbox-builtin "IO.socketAccept.impl.v3")
(sandbox-builtin "IO.socketSend.impl.v3")
(sandbox-builtin "IO.socketReceive.impl.v3")
(sandbox-builtin "IO.kill.impl.v3")
(sandbox-builtin "IO.delay.impl.v3")
(sandbox-builtin "IO.stdHandle")
(sandbox-builtin "IO.process.call")
(sandbox-builtin "IO.process.start")
(sandbox-builtin "IO.process.kill")
(sandbox-builtin "IO.process.wait")
(sandbox-builtin "IO.process.exitCode")
(sandbox-builtin "MVar.new")
(sandbox-builtin "MVar.newEmpty.v2")
(sandbox-builtin "MVar.take.impl.v3")
(sandbox-builtin "MVar.tryTake")
(sandbox-builtin "MVar.put.impl.v3")
(sandbox-builtin "MVar.tryPut.impl.v3")
(sandbox-builtin "MVar.swap.impl.v3")
(sandbox-builtin "MVar.isEmpty")
(sandbox-builtin "MVar.read.impl.v3")
(sandbox-builtin "MVar.tryRead.impl.v3")
(sandbox-builtin "Tls.ClientConfig.default")
(sandbox-builtin "Tls.ServerConfig.default")
(sandbox-builtin "Tls.ClientConfig.certificates.set")
(sandbox-builtin "Tls.ServerConfig.certificates.set")
(sandbox-builtin "TVar.new")
(sandbox-builtin "TVar.read")
(sandbox-builtin "TVar.write")
(sandbox-builtin "TVar.newIO")
(sandbox-builtin "TVar.readIO")
(sandbox-builtin "TVar.swap")
(sandbox-builtin "STM.retry")
(sandbox-builtin "IO.ref")
(sandbox-builtin "Ref.readForCas")
(sandbox-builtin "Ref.Ticket.read")
(sandbox-builtin "Ref.cas")
(sandbox-builtin "Promise.new")
(sandbox-builtin "Promise.read")
(sandbox-builtin "Promise.tryRead")
(sandbox-builtin "Promise.write")
(sandbox-builtin "Tls.newClient.impl.v3")
(sandbox-builtin "Tls.newServer.impl.v3")
(sandbox-builtin "Tls.handshake.impl.v3")
(sandbox-builtin "Tls.send.impl.v3")
(sandbox-builtin "Tls.decodeCert.impl.v3")
(sandbox-builtin "Tls.encodeCert")
(sandbox-builtin "Tls.decodePrivateKey")
(sandbox-builtin "Tls.encodePrivateKey")
(sandbox-builtin "Tls.receive.impl.v3")
(sandbox-builtin "Tls.terminate.impl.v3")
(sandbox-builtin "IO.randomBytes")
(sandbox-builtin "IO.array")
(sandbox-builtin "IO.arrayOf")
(sandbox-builtin "IO.bytearray")
(sandbox-builtin "IO.bytearrayOf")
