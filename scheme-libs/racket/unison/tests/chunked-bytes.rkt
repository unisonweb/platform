#lang racket/base

(require rackunit
         "../chunked-bytes.rkt"
         "../chunked-seq.rkt")

(define (unchunked proc)
  (make-keyword-procedure
   (λ (kws kw-args bs)
     (chunked-bytes->bytes
      (keyword-apply proc kws kw-args (list (bytes->chunked-bytes bs)))))))

(define base16-encode* (unchunked base16-encode))
(define base16-decode* (unchunked base16-decode))
(define base32-encode* (unchunked base32-encode))
(define base32-decode* (unchunked base32-decode))
(define base64-encode* (unchunked base64-encode))
(define base64-decode* (unchunked base64-decode))

(check-equal? (base16-encode* #"") #"")
(check-equal? (base16-encode* #"abcdefghijk") #"6162636465666768696a6b")
(check-equal? (base16-encode* #"\xde\xad\xbe\xef") #"deadbeef")

(check-equal? (base16-decode* #"") #"")
(check-equal? (base16-decode* #"6162636465666768696a6b") #"abcdefghijk")
(check-equal? (base16-decode* #"6162636465666768696A6B") #"abcdefghijk")
(check-equal? (base16-decode* #"deadbeef") #"\xde\xad\xbe\xef")
(check-equal? (base16-decode* #"DEADBEEF") #"\xde\xad\xbe\xef")

(check-exn #px"input: invalid length$" (λ () (base16-decode* #"d")))
(check-exn #px"input: invalid length$" (λ () (base16-decode* #"dea")))
(check-exn #px"input: invalid length$" (λ () (base16-decode* #"deadb")))
(check-exn #px"input: invalid encoding at offset: 0$" (λ () (base16-decode* #"g0")))
(check-exn #px"input: invalid encoding at offset: 1$" (λ () (base16-decode* #"0g")))

(check-equal? (base32-encode* #:alphabet 'standard #"") #"")
(check-equal? (base32-encode* #:alphabet 'hex      #"") #"")
(check-equal? (base32-encode* #:alphabet 'standard #"T") #"KQ======")
(check-equal? (base32-encode* #:alphabet 'hex      #"T") #"ag======")
(check-equal? (base32-encode* #:alphabet 'standard #"Th") #"KRUA====")
(check-equal? (base32-encode* #:alphabet 'hex      #"Th") #"ahk0====")
(check-equal? (base32-encode* #:alphabet 'standard #"The") #"KRUGK===")
(check-equal? (base32-encode* #:alphabet 'hex      #"The") #"ahk6a===")
(check-equal? (base32-encode* #:alphabet 'standard #"The ") #"KRUGKIA=")
(check-equal? (base32-encode* #:alphabet 'hex      #"The ") #"ahk6a80=")
(check-equal? (base32-encode* #:alphabet 'standard #"The q") #"KRUGKIDR")
(check-equal? (base32-encode* #:alphabet 'hex      #"The q") #"ahk6a83h")
(check-equal? (base32-encode* #:alphabet 'standard #"The qu") #"KRUGKIDROU======")
(check-equal? (base32-encode* #:alphabet 'hex      #"The qu") #"ahk6a83hek======")
(check-equal? (base32-encode* #:alphabet 'standard #"The quick brown fox jumped over the lazy dog.")
              #"KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DFMQQG65TFOIQHI2DFEBWGC6TZEBSG6ZZO")
(check-equal? (base32-encode* #:alphabet 'hex      #"The quick brown fox jumped over the lazy dog.")
              #"ahk6a83helkm6qp0c9p6utre41j6uu10d9qmqs35cgg6utj5e8g78q3541m62ujp41i6uppe")

(check-equal? (base32-decode* #:alphabet 'standard #"") #"")
(check-equal? (base32-decode* #:alphabet 'hex      #"") #"")
(check-equal? (base32-decode* #:alphabet 'standard #"KQ======") #"T")
(check-equal? (base32-decode* #:alphabet 'hex      #"ag======") #"T")
(check-equal? (base32-decode* #:alphabet 'hex      #"AG======") #"T")
(check-equal? (base32-decode* #:alphabet 'standard #"KRUA====") #"Th")
(check-equal? (base32-decode* #:alphabet 'hex      #"ahk0====") #"Th")
(check-equal? (base32-decode* #:alphabet 'hex      #"AHK0====") #"Th")
(check-equal? (base32-decode* #:alphabet 'standard #"KRUGK===") #"The")
(check-equal? (base32-decode* #:alphabet 'hex      #"ahk6a===") #"The")
(check-equal? (base32-decode* #:alphabet 'hex      #"AHK6a===") #"The")
(check-equal? (base32-decode* #:alphabet 'standard #"KRUGKIA=") #"The ")
(check-equal? (base32-decode* #:alphabet 'hex      #"ahk6a80=") #"The ")
(check-equal? (base32-decode* #:alphabet 'standard #"KRUGKIDR") #"The q")
(check-equal? (base32-decode* #:alphabet 'hex      #"ahk6a83h") #"The q")
(check-equal? (base32-decode* #:alphabet 'standard #"KRUGKIDROU======") #"The qu")
(check-equal? (base32-decode* #:alphabet 'hex      #"ahk6a83hek======") #"The qu")
(check-equal? (base32-decode* #:alphabet 'standard #"KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DFMQQG65TFOIQHI2DFEBWGC6TZEBSG6ZZO")
              #"The quick brown fox jumped over the lazy dog.")
(check-equal? (base32-decode* #:alphabet 'hex      #"ahk6a83helkm6qp0c9p6utre41j6uu10d9qmqs35cgg6utj5e8g78q3541m62ujp41i6uppe")
              #"The quick brown fox jumped over the lazy dog.")

(check-equal? (base64-encode* #"") #"")
(check-equal? (base64-encode* #"T") #"VA==")
(check-equal? (base64-encode* #"Th") #"VGg=")
(check-equal? (base64-encode* #"The") #"VGhl")
(check-equal? (base64-encode* #"The ") #"VGhlIA==")
(check-equal? (base64-encode* #"The q") #"VGhlIHE=")
(check-equal? (base64-encode* #"The qu") #"VGhlIHF1")
(check-equal? (base64-encode* #"The quick brown fox jumped over the lazy dog.")
              #"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu")

(check-equal? (base64-encode* #:pad? #f #"") #"")
(check-equal? (base64-encode* #:pad? #f #"T") #"VA")
(check-equal? (base64-encode* #:pad? #f #"Th") #"VGg")
(check-equal? (base64-encode* #:pad? #f #"The") #"VGhl")
(check-equal? (base64-encode* #:pad? #f #"The ") #"VGhlIA")
(check-equal? (base64-encode* #:pad? #f #"The q") #"VGhlIHE")
(check-equal? (base64-encode* #:pad? #f #"The qu") #"VGhlIHF1")
(check-equal? (base64-encode* #:pad? #f #"The quick brown fox jumped over the lazy dog.")
              #"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu")

(check-equal? (base64-decode* #"") #"")
(check-equal? (base64-decode* #"VA==") #"T")
(check-equal? (base64-decode* #"VGg=") #"Th")
(check-equal? (base64-decode* #"VGhl") #"The")
(check-equal? (base64-decode* #"VGhlIA==") #"The ")
(check-equal? (base64-decode* #"VGhlIHE=") #"The q")
(check-equal? (base64-decode* #"VGhlIHF1") #"The qu")
(check-equal? (base64-decode* #"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu")
              #"The quick brown fox jumped over the lazy dog.")

(check-exn #px"input: invalid length$" (λ () (base64-decode* #"V")))
(check-exn #px"input: invalid length$" (λ () (base64-decode* #"VA")))
(check-exn #px"input: invalid length$" (λ () (base64-decode* #"VA=")))
(check-exn #px"input: invalid encoding at offset: 0$" (λ () (base64-decode* #"====")))
(check-exn #px"input: invalid encoding at offset: 1$" (λ () (base64-decode* #"V===")))

(check-equal? (base64-decode* #:padded? #f #"") #"")
(check-equal? (base64-decode* #:padded? #f #"VA") #"T")
(check-equal? (base64-decode* #:padded? #f #"VGg") #"Th")
(check-equal? (base64-decode* #:padded? #f #"VGhl") #"The")
(check-equal? (base64-decode* #:padded? #f #"VGhlIA") #"The ")
(check-equal? (base64-decode* #:padded? #f #"VGhlIHE") #"The q")
(check-equal? (base64-decode* #:padded? #f #"VGhlIHF1") #"The qu")
(check-equal? (base64-decode* #:padded? #f #"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu")
              #"The quick brown fox jumped over the lazy dog.")

(check-exn #px"input: invalid length$" (λ () (base64-decode* #:padded? #f #"V")))
(check-exn #px"input: invalid length$" (λ () (base64-decode* #:padded? #f #"VGhlI")))
(check-exn #px"input: invalid encoding at offset: 0$" (λ () (base64-decode* #:padded? #f #"==")))
(check-exn #px"input: invalid encoding at offset: 1$" (λ () (base64-decode* #:padded? #f #"V=")))
(check-exn #px"input: invalid encoding at offset: 2$" (λ () (base64-decode* #:padded? #f #"VA==")))
(check-exn #px"input: invalid encoding at offset: 6$" (λ () (base64-decode* #:padded? #f #"VGhlIA==")))
