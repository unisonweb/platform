name: CI

on:
  # Build on every pull request (and new PR commit)
  pull_request:
  # Build on new pushes to trunk (E.g. Merge commits)
  # Without the branch filter, each commit on a branch with a PR is triggered twice.
  # See: https://github.community/t/how-to-trigger-an-action-on-push-or-pull-request-but-not-both/16662
  push:
    branches:
      - trunk
    tags:
      - release/*

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults: 
      run:
        working-directory: unison
    strategy:
      # Run each build to completion, regardless of if any have failed
      fail-fast: false
      matrix:
        os:
          # temporarily disable non-windows builds to speed up iteration time
          - ubuntu-20.04
          - macOS-11.0
          - macOS-10.15
          - windows-2019
    steps:
      - uses: actions/checkout@v2
        with:
          path: unison

      # The number towards the beginning of the cache keys allow you to manually avoid using a previous cache.
      # GitHub will automatically delete caches that haven't been accessed in 7 days, but there is no way to
      # purge one manually.

      # Cache ~/.stack, keyed by the contents of 'stack.yaml'.
      - uses: actions/cache@v2
        name: cache ~/.stack
        with:
          path: ~/.stack
          # Main cache key: commit hash. This should always result in a cache miss...
          # So when loading a cache we'll always fall back to the restore-keys,
          # which should load the most recent cache via a prefix search on the most
          # recent branch cache.
          # Then it will save a new cache at this commit sha, which should be used by
          # the next build on this branch.
          key: stack-0_${{matrix.os}}-${{hashFiles('stack.yaml')}}-${{github.sha}}
          # Fall-back to use the most recent cache for the stack.yaml, or failing that the OS
          restore-keys: |
            stack-0_${{matrix.os}}-${{hashFiles('stack.yaml')}}
            stack-0_${{matrix.os}}

      # Cache each local package's ~/.stack-work for fast incremental builds in CI.
      - uses: actions/cache@v2
        name: cache .stack-work
        with:
          path: |
            **/.stack-work
          # Main cache key: commit hash. This should always result in a cache miss...
          # So when loading a cache we'll always fall back to the restore-keys,
          # which should load the most recent cache via a prefix search on the most
          # recent branch cache.
          # Then it will save a new cache at this commit sha, which should be used by
          # the next build on this branch.
          key: stack-work-3_${{matrix.os}}-${{github.sha}}
          restore-keys: stack-work-3_${{matrix.os}}

      # Install stack by downloading the binary from GitHub. The installation process is different for Linux and macOS,
      # so this is split into two steps, only one of which will run on any particular build.
      - name: install stack (Linux)
        if: runner.os == 'Linux'
        working-directory: ${{ github.workspace }}
        run: |
          mkdir stack && cd stack
          curl -L https://github.com/commercialhaskell/stack/releases/download/v2.5.1/stack-2.5.1-linux-x86_64.tar.gz | tar -xz
          echo "$PWD/stack-2.5.1-linux-x86_64/" >> $GITHUB_PATH
      - name: install stack (macOS)
        working-directory: ${{ github.workspace }}
        if: runner.os == 'macOS'
        run: |
          mkdir stack && cd stack
          curl -L https://github.com/commercialhaskell/stack/releases/download/v2.5.1/stack-2.5.1-osx-x86_64.tar.gz | tar -xz
          echo "$PWD/stack-2.5.1-osx-x86_64/" >> $GITHUB_PATH

      # One of the transcripts fails if the user's git name hasn't been set.
      - name: set git user info
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: remove ~/.stack/setup-exe-cache on macOS
        if: runner.os == 'macOS'
        run: rm -rf ~/.stack/setup-exe-cache

      # Build deps, then build local code. Splitting it into two steps just allows us to see how much time each step
      # takes.
      - name: build dependencies
        run: stack --no-terminal build --fast --only-dependencies
      - name: build
        run: stack --no-terminal build --fast --no-run-tests --test

      # Run each test suite (tests and transcripts)
      - name: unison-cli tests
        run: stack --no-terminal build --fast --test unison-cli
      - name: unison-parser-typechecker tests
        run: stack --no-terminal exec tests
      - name: unison-util-relation tests
        run: stack --no-terminal build --fast --test unison-util-relation
      - name: transcripts
        run: |
          stack --no-terminal exec transcripts
          # Add all changes to the index for when we diff.
          git add --all
          # Fail if any transcripts cause git diffs.
          git diff --cached --ignore-cr-at-eol --exit-code
      - name: prettyprint-round-trip
        run: stack --no-terminal exec unison transcript unison-src/transcripts-round-trip/main.md
      - name: integration-tests
        run: stack --no-terminal exec integration-tests
