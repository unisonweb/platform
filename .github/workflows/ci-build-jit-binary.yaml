name: build jit binary

on:
  workflow_call:

defaults:
  run:
    shell: bash

env:
  jit_src: unison-jit-src/
  jit_dist: unison-jit-dist/
  racket_version: "8.7"

jobs:
  build-jit-binary:
    name: build jit binary
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macOS-12, windows-2019]
    runs-on: ${{matrix.os}}
    steps:
      - name: set up environment
        run: |
          jit_src="$GITHUB_WORKSPACE/${{ env.jit_src }}" # scheme source
          jit_exe="${jit_src}/unison-runtime" # initially built jit
          jit_dist="${{ runner.temp }}/${{ env.jit_dist }}" # jit binary with libraries destination
          jit_dist_exe="${jit_dist}/bin/unison-runtime" # jit binary itself
          ucm="${{ runner.temp }}/unison"

          if [[ ${{runner.os}} = "Windows" ]]; then
            jit_src="${jit_src//\\//}"
            jit_dist="${jit_dist//\\//}"

            jit_exe="${jit_exe//\\//}.exe"
            jit_dist_exe="${jit_dist//\\//}/unison-runtime.exe"
            ucm="${ucm//\\//}.exe"
          fi

          echo "jit_src=$jit_src" >> $GITHUB_ENV
          echo "jit_exe=$jit_exe" >> $GITHUB_ENV
          echo "jit_dist=$jit_dist" >> $GITHUB_ENV
          echo "jit_dist_exe=$jit_dist_exe" >> $GITHUB_ENV
          echo "ucm=$ucm" >> $GITHUB_ENV

      - name: get workflow files, for checking hashes
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github

      - name: download jit source
        uses: actions/download-artifact@v4
        with:
          name: jit-source
          path: ${{ env.jit_src }}

      - name: cache/restore jit binaries
        id: cache-jit-binaries
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.jit_dist }}
          key: jit-dist_${{matrix.os}}.racket_${{env.racket_version}}.jit-src_${{hashFiles(format('{0}/**.rkt',env.jit_src),format('{0}/**.ss',env.jit_src))}}.yaml_${{hashFiles('**/ci-build-jit-binary.yaml')}}

      - name: cache racket dependencies
        if: steps.cache-jit-binaries.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/racket
            ~/.local/share/racket
          key: ${{ matrix.os }}.racket_${{env.racket_version}}.yaml_${{hashFiles('**/ci-build-jit-binary.yaml')}}

      - name: install racket
        if: steps.cache-jit-binaries.outputs.cache-hit != 'true'
        uses: unisonweb/actions/racket/install@buildjet-cache
        with:
          version: ${{env.racket_version}}

      - name: set up redistributables (macos)
        if: runner.os == 'macOS' && steps.cache-jit-binaries.outputs.cache-hit != 'true'
        run: |
          brew install libb2
          racket_lib_dir="$(dirname "$(readlink -f "$(which raco)")")/../lib"
          ln -s "$(brew --prefix)"/lib/libb2.*.dylib "$racket_lib_dir/"

      - name: build jit binary
        if: steps.cache-jit-binaries.outputs.cache-hit != 'true'
        shell: bash
        run: |
          if [[ ${{runner.os}} = "Windows" ]]; then
            raco pkg install --auto --skip-installed --scope installation x509-lib
          elif [[ ${{runner.os}} = "macOS" ]]; then
            raco pkg install --auto --skip-installed --scope installation x509-lib
          elif [[ ${{runner.os}} = "Linux" ]]; then
            sudo raco pkg install --auto --skip-installed --scope installation x509-lib
          fi
          raco pkg install --auto --skip-installed "$jit_src"/unison
          raco exe --embed-dlls "$jit_src"/unison-runtime.rkt
          raco distribute -v "$jit_dist" "$jit_exe"

      - name: cache/save jit binaries
        if: steps.cache-jit-binaries.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.jit_dist }}
          key: jit-dist_${{matrix.os}}.racket_${{env.racket_version}}.jit-src_${{hashFiles(format('{0}/**.rkt',env.jit_src),format('{0}/**.ss',env.jit_src))}}.yaml_${{hashFiles('**/ci-build-jit-binary.yaml')}}

      - name: save jit binary
        uses: actions/upload-artifact@v4
        with:
          name: jit-binary-${{ matrix.os }}
          path: ${{ env.jit_dist }}/**

      # - name: setup tmate session
      #   uses: mxschmitt/action-tmate@v3
