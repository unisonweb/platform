
shouldFail fn =
  result = catchAll fn
  isLeft result

tcp.tests = do
  -- -- TODO: Enable this once scheme output correctly escapes \r
  -- check "connects to example.com" tcp.example.com
  check "rejects invalid port" do shouldFail do Socket.client (HostName "example.com") (Port "what")
  check "no send after close" do shouldFail do
    socket = Socket.client (HostName "example.com") (Port "80")
    Socket.close socket
    Socket.send socket (toUtf8 "GET /index.html HTTP/1.0\r\n\r\n")
  check "no send on listener" do shouldFail do
    match Socket.server None (Port "0") with
        BoundServerSocket socket -> Socket.send socket (toUtf8 "what")
  !testServerAndClient

tcp.example.com = do
    socket = Socket.client (HostName "example.com") (Port "80")
    Socket.send socket (toUtf8 "GET /index.html HTTP/1.0\r\nHost: example.com\r\n\r\n")
    response = Socket.receive socket
    Socket.close socket
    contains "HTTP/1.0 200 OK" (base.Text.fromUtf8 response)

testServerAndClient = do
  setup = catchAll do
    socket = Socket.listen (server None (Port "0"))
    port = match socket with ListeningServerSocket sock -> Socket.port sock
    (socket, port)

  match setup with
    Left exn ->
      Tests.fail "Unable to bind and listen on a socket" ""
    Right (socket, port) ->
      serve = do
        sock = Socket.accept socket
        data = Socket.receive sock
        Socket.send sock (toUtf8 "from server")
        base.Text.fromUtf8 data

      serveResult = !Promise.new
      _ = fork do Promise.write serveResult (catchAll serve)

      data = catchAll do
        clientSocket = Socket.client (HostName "localhost") (Port (Nat.toText port))
        Socket.send clientSocket (toUtf8 "from client")
        base.Text.fromUtf8 (Socket.receive clientSocket)

      checkEqual "Server received data" (Promise.read serveResult) (Right "from client")
      checkEqual "Client received data" data (Right "from server")
