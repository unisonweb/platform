serial.directory =
  FilePath "unison-src/transcripts-using-base/serialized-cases/"

(<+>) : FilePath -> FilePath -> FilePath
(<+>) = cases (FilePath l), (FilePath r) -> FilePath (l ++ r)

serial.availableCases : '{IO,Exception} [Text]
serial.availableCases _ =
  use List map
  p = cases (FilePath nm) -> contains ".ser" nm
  slice = cases (FilePath nm) ->
    Text.take (Text.size nm - 4) nm
  -- caseNums = ["00", "01", "02", "03"]
  caseNums = ["00", "02"]
  files = map (n -> FilePath ("case-" ++ n ++ ".ser")) caseNums
  map slice (filter p files)

serial.gen : Nat -> Nat -> (Nat, Nat)
serial.gen seed k =
  c = 1
  a = 22695477
  m = shiftLeft 1 32
  s = mod (a * seed + c) m
  mask = shiftLeft 1 (Nat.min 14 k)
  (mod (shiftRight s 15) mask, s)

  
serial.shuffle : Nat -> [a] -> [a]
serial.shuffle =
  pick acc seed = cases
    l | List.size l <= 1 -> acc ++ l
      | otherwise -> match gen seed (size l) with
        (k, seed) -> match (take k l, drop k l) with
          (pre, x +: post) -> pick (acc :+ x) seed (pre ++ post)
          (pre, []) -> pick acc seed pre
  
  pick []

serial.checkCodeRoundtrip : Code ->{Exception,Tests,IO} Boolean
serial.checkCodeRoundtrip code0 =
  match Code.deserialize (Code.serialize code0) with
    Left err -> raiseFailure ("could not roundrip code: " ++ err) code0
    Right code1 -> code0 === code1

serial.loadValueBytes :
  base.Bytes ->{Exception,IO} ([(Link.Term, Code)], reflection.Value)
serial.loadValueBytes bs = match Value.deserialize bs with
  Left err ->
    raiseFailure ("could not deserialize value: " ++ err) bs
  Right sv ->
    if Value.serialize sv === bs then ()
    else raiseFailure "reserialized bytes did not match" bs
    match Value.load sv with
      Left l -> raiseFailure "could not load value" ()
      Right v -> v

serial.readFile : FilePath -> base.Bytes
serial.readFile fp =
  h = FilePath.open fp Read
  read acc =
    if isEOF h
    then
      close h
      acc
    else read (acc ++ getBytes h 1024)
  read 0xs

serial.loadSelfContained : Text -> FilePath ->{IO, Tests, Exception} a
serial.loadSelfContained name path =
  input = readFile path
  match fromBase32 input with
    Left msg -> raiseFailure msg input
    Right bs ->
    (deps, v) = loadValueBytes bs

    if List.all (checkCodeRoundtrip << at2) deps
    then pass (name ++ " code roundtrip")
    else fail name "code roundtrip"

    _ = cache_ deps
    match Value.load v with
      Left l -> raiseFailure "value missing deps" l
      Right x -> x

serial.runTestCase : Text ->{Tests,IO} ()
serial.runTestCase name =
  sfile = directory <+> FilePath (name ++ ".ser")
  ofile = directory <+> FilePath (name ++ ".out")
  hfile = directory <+> FilePath (name ++ ".hash")

  handle
    p@(f, i) = loadSelfContained name sfile
    o = fromUtf8 (readFile ofile)
    -- h = readFile hfile

    if f i === o
    then pass name
      -- todo: check hashes
      -- if toBase32 (crypto.hash Sha3_512 p) == h
      --    then pass name
      --    else fail name "hash mismatch"
    else fail name "output mismatch"
  with cases
    { x } -> x
    { raise f -> _ } -> exception ("test failure: " ++ name) f

serial.tests : '{Tests,IO} ()
serial.tests = do
  handle
    l =  !availableCases
    m = shiftLeft 1 32
    seed = mod (toRepresentation !systemTimeMicroseconds) m
    cs = shuffle seed l
    List.map runTestCase cs
  with cases
    {x} -> ()
    {raise f -> k} -> exception "failed to load test cases" f
