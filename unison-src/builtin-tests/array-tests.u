checkBytesII src larr rarr i =
  l = data.ByteArray.Raw.read8 larr i
  r = data.ByteArray.Raw.read8 rarr i
  if l == r
    then if i > 0 then checkBytesII src larr rarr (l-1) else pass src
    else let
      tl = Debug.toText l
      tr = Debug.toText r
      fail src ("`" ++ tl ++ "` is not equal to `" ++ tr ++ "`")

checkBytesMI src marr iarr i =
  l = mutable.ByteArray.Raw.read8 marr i
  r = data.ByteArray.Raw.read8 iarr i
  if l == r
    then if i > 0 then checkBytesMI src marr iarr (l-1) else pass src
    else let
      tl = Debug.toText l
      tr = Debug.toText r
      fail src ("`" ++ tl ++ "` is not equal to `" ++ tr ++ "`")

checkBytesMM src larr rarr i =
  l = mutable.ByteArray.Raw.read8 larr i
  r = mutable.ByteArray.Raw.read8 rarr i
  if l == r
    then if i > 0 then checkBytesMM src larr rarr (l-1) else pass src
    else let
      tl = Debug.toText l
      tr = Debug.toText r
      fail src ("`" ++ tl ++ "` is not equal to `" ++ tr ++ "`")

boxarrTests : '{IO,Exception,Tests} ()
boxarrTests = do
  iarr = Scope.run do
    marr = Scope.Raw.array 1
    checkEqual "boxed array/msize" (Array.Raw.size marr) 1
    Array.Raw.write marr 0 "hello"
    checkEqual "boxed mut read/write" (Array.Raw.read marr 0) "hello"
    freeze marr 0 1
  checkEqual "boxed new/size" (Array.Raw.size iarr) 1
  checkEqual "boxed imm read/write" (Array.Raw.read iarr 0) "hello"

  iarr2 = Scope.run do
    marr = Scope.Raw.array 1
    data.Array.Raw.copyTo! marr 0 iarr 0 1
    checkEqual "immuntable copyTo!" (Raw.read marr 0) "hello"
    marr2 = Scope.Raw.arrayOf "goodbye" 1
    mutable.Array.Raw.copyTo! marr2 0 marr 0 1
    checkEqual "mutable copyTo!" (Raw.read marr 0) "hello"
    freeze! marr2

  checkEqual "boxed immutable copied" (Raw.read iarr2 0) "hello"

bytearrTests : '{IO,Exception,Tests} ()
bytearrTests = do
  iarr = ByteArray.Raw.new! 32 (marr -> let
    checkEqual "byte new/msize" (ByteArray.Raw.size marr) 32
    ByteArray.Raw.write64be marr 0  0xffffffff
    ByteArray.Raw.write32be marr 8  0xffff
    ByteArray.Raw.write16be marr 12 0xff
    ByteArray.Raw.write8    marr 14 0xf
    n64 = mutable.ByteArray.Raw.read64be marr 0
    n40 = mutable.ByteArray.Raw.read40be marr 0
    n32 = mutable.ByteArray.Raw.read32be marr 8
    n24 = mutable.ByteArray.Raw.read24be marr 8
    n16 = mutable.ByteArray.Raw.read16be marr 12
    n8  = mutable.ByteArray.Raw.read8    marr 14
    checkEqual "byte mut read/write 64" n64 0xffffffff
    checkEqual "byte mut read/write 40" n40 0xff
    checkEqual "byte mut read/write 32" n32 0xffff
    checkEqual "byte mut read/write 24" n24 0xff
    checkEqual "byte mut read/write 16" n16 0xff
    checkEqual "byte mut read/write 8"  n8  0xf)
  checkEqual "byte new/size" (ByteArray.Raw.size iarr) 32
  n64 = data.ByteArray.Raw.read64be iarr 0
  n40 = data.ByteArray.Raw.read40be iarr 0
  n32 = data.ByteArray.Raw.read32be iarr 8
  n24 = data.ByteArray.Raw.read24be iarr 8
  n16 = data.ByteArray.Raw.read16be iarr 12
  n8  = data.ByteArray.Raw.read8    iarr 14
  checkEqual "byte imm read/write 64" n64 0xffffffff
  checkEqual "byte imm read/write 40" n40 0xff
  checkEqual "byte imm read/write 32" n32 0xffff
  checkEqual "byte imm read/write 24" n24 0xff
  checkEqual "byte imm read/write 16" n16 0xff
  checkEqual "byte imm read/write 8"  n8  0xf

  iarr2 = Scope.run do
    marr = Scope.Raw.byteArray 32
    data.ByteArray.Raw.copyTo! marr 0 iarr 0 32
    checkBytesMI "byte immutable copyTo!" marr iarr 31
    marr2 = Scope.Raw.byteArray 32
    mutable.ByteArray.Raw.copyTo! marr2 0 marr 0 32
    checkBytesMM "byte mutable copyTo!" marr2 marr 31
    freeze! marr2
  checkBytesII "byte immutable copied" iarr iarr2 31

array.tests = do
  !bytearrTests
  !boxarrTests
